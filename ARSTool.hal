external procedure SubCashRows_IVVc(record IVVc,Boolean,var val,var val);
external function Integer TypeOfCurncy(var string,var Integer);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function LongInt DateDiff(Date,Date);
external procedure ARSrList(record RcVc,record CUVc,val,val,val,val,val,val,val,val,val,val,val,
                            Array Integer,Array string,Array string,Array LongInt,Array LongInt,
                            Array Date,Array Date,Array val,Array val,Array val,Array val,
                            Array string,Array string,Array string,Integer);
external procedure CalcInt2(val,LongInt,val,var val);
external function Integer GetVATLaw();
external function Integer GetIntYc(Date);
external procedure PrintARSForm(record RcVc,record CUVc,
                                val,val,val,val,val,val,val,
                                Integer,Integer,
                                val,val,val,val,val,val,val,val,val,
                                val,val,val,val,val,val,val,val,val,val,
                                Array Integer,Array string,Array LongInt,Array LongInt,
                                Array Date,Array Date,Array val,Array val,Array val,Array val,
                                Array string,Array string,Array string,Array string,Integer);
external procedure CustAged(record CUVc,Date,Date,Date,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val);
external procedure GetOnAccBalance(record RcVc,string,string,Boolean,Integer,var val,var val,var val,var val,var val,var val,var val,record SMVc,
                   Array string,Array val,var Integer);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetBaseCurncy(Integer,var string);

procedure AddARSRowIP(Array Integer aRwtype,Array string aInvoiceNr,Array LongInt alatedays,Array LongInt aRemndr,
                    Array Date aInvDate,Array Date aDueDate,Array val aIntVal,Array val aRVal,Array val aRValCur,Array val aSum4,
                    Array string aVEInvNo,Array string aCurncyCode,var Integer acnt,
                    record RcVc RepSpec,record CUVc CUp,LongInt maxintdays,val opensum,val opensumb1,record IPVc IPr,row IPVc IPrwp)
BEGIN
  LongInt intdays;
  record IIBlock IIRec;
  val t;
  Date blankd;

  BlockLoad(IIRec);
  aRwtype[acnt] = 10;
  aInvoiceNr[acnt] = IPr.SerNr;
  aInvDate[acnt] = IPr.TransDate;
  aDueDate[acnt] = IPr.TransDate;
  alatedays[acnt] = DateDiff(IPr.TransDate,RepSpec.d1);
  aRVal[acnt] = opensumb1;
  aRValCur[acnt] = opensum;
  aSum4[acnt] = IPrwp.RecVal;
  alatedays[acnt] = 0;
  aIntVal[acnt] = blankval;
  aCurncyCode[acnt] = IPrwp.RecCurncy;
  aRemndr[acnt] = -1;
  acnt = acnt + 1;
  RETURN;
END;

procedure AddARSRow2(Array Integer aRwtype,Array string aInvoiceNr,Array string aRecNr,Array LongInt alatedays,Array LongInt aRemndr,
                    Array Date aInvDate,Array Date aDueDate,Array val aIntVal,Array val aRVal,Array val aRValCur,Array val aSum4,
                    Array string aVEInvNo,Array string aCurncyCode,Array string aOfficialSerNo,var Integer acnt,
                    record RcVc RepSpec,record CUVc CUp,LongInt maxintdays,val opensum,val opensumb1,record IVVc IVp,var val intvp)
BEGIN
  LongInt intdays;
  record IIBlock IIRec;
  val t;
  Date blankd;

  BlockLoad(IIRec);
//  if (IVp.InstallmentInv!=0) then begin
//    AddARSInstallments(aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aSum4,aVEInvNo,aCurncyCode,acnt,
//                       RepSpec,CUp,maxintdays,IVp,intvp,IIRec);
//    goto LAddARSRow2;
//  end;
  aRwtype[acnt] = IVp.InvType;
  aInvoiceNr[acnt] = IVp.SerNr;
  aInvDate[acnt] = IVp.InvDate;
  aDueDate[acnt] = IVp.PayDate;
  aRVal[acnt] = opensumb1;
  aRValCur[acnt] = opensum;
  aSum4[acnt] = IVp.Sum4;
  alatedays[acnt] = DateDiff(IVp.PayDate,RepSpec.d1);
  aIntVal[acnt] = blankval;
  aCurncyCode[acnt] = IVp.CurncyCode;
  aOfficialSerNo[acnt] = IVp.OfficialSerNr;
  switch (GetVATLaw) begin
    case 7://vatDanish
      if (maxintdays!=-1) then begin
        intdays = -alatedays[acnt];
        if (intdays>maxintdays) then begin intdays = maxintdays; end;
        if (intdays>0) then begin
          CalcInt2(aRVal[acnt],intdays,IIRec.IntRate,t);
          aIntVal[acnt] = t;
        end;
      end;
    otherwise
      intdays = -alatedays[acnt];
      if (intdays>0) then begin
        if ((IVp.InvType!=3) and (IVp.InvType!=4)) then begin
          t = MulRateToBase1(IVp.CurncyCode,aRVal[acnt],IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
          CalcInt2(t,intdays,IIRec.IntRate,t);
          aIntVal[acnt] = t;
        end;
      end;
  end;
  if (RepSpec.flags[2]==1) then begin
    if (IVp.LastRemndr==-1) then begin
      aRemndr[acnt] = IVp.LastRemndr + 2;
    end else begin
      aRemndr[acnt] = IVp.LastRemndr + 1;
    end;
  end else begin
    aRemndr[acnt] = IVp.LastRemndr;
  end;
  if (IVp.CurncyCode==CUp.CurncyCode) then begin
    intvp = aIntVal[acnt];
  end else begin
    if (blank(CUp.CurncyCode)) then begin
      intvp = MulRateToBase1(IVp.CurncyCode,aIntVal[acnt],IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
    end else begin
      intvp = DivRateToBase1(CUp.CurncyCode,aIntVal[acnt],IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
    end;
  end;
  if ((CUp.InterestFlag==0) or (IVp.NoInterestFlag!=0)) then begin
    intvp = blankval;
    aIntVal[acnt] = blankval;
  end;  
  acnt = acnt + 1;
LAddARSRow2:;  
  RETURN;
END;

global
function Boolean CheckIfIVOpen(Date d1,record IVVc IVp,string colns,var val opensum,Boolean subcashf,Boolean basecurf)
BEGIN
  Boolean res;
  record CUVc CUr;
  record IPrsVc IPrsr;
  record IVVc IVr;
  row IVVc IVrw;
  record IPVc IPr;
  row IPVc IPrw;
  record TRVc TRr;
  row TRVc TRrw;
  record CLInVc CLInr;
  row CLInVc CLInrw;
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;
  record CredManVc CredManr;
  Integer i,rwcnt;
  Boolean found,testf;
  val bal;
  val t,t2;
  Integer oldstyle;  
  record BaseCurBlock bcur;

  CUr.Code = IVp.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin end;
  BlockLoad(bcur);
  found = true;
  if (IVp.InvType==3) then begin
    if (IVp.CredInv>0) then begin
      IVr.SerNr = IVp.CredInv;
      if (ReadFirstMain(IVr,1,true)) then begin
        bal = bal + IVr.Sum4;
      end;
      found = false;
    end;
  end;
  if (found) then begin

    if (subcashf) then begin
      rwcnt = MatRowCnt(IVp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVrw);
        if (IVrw.stp==6) then begin
          bal = bal + IVrw.Sum;
        end;
      end;  
      SubCashRows_IVVc(IVp,true,t,t2);
      if (IVp.InvType==3) then begin
        if (IVp.CredInv>0) then begin
          bal = bal - (t - IVp.Sum4);
        end else begin
          bal = bal - (t + IVp.Sum4);
        end;
      end else begin
        bal = bal - (t - IVp.Sum4);
      end;
    end;


  found = true;
  IPrsr.IVNr = IVp.SerNr;
  while (LoopKey("IVKey",IPrsr,1,found)) begin
    if (IPrsr.IVNr!=IVp.SerNr) then begin found = false; end;
    if (found) then begin
      if (IPrsr.TransDate<=d1) then begin
        switch (IPrsr.TransType) begin
          case kIPrsTransTypeInvoice:
            if (IPrsr.TransNr!=IVp.SerNr) then begin
              IVr.SerNr = IPrsr.TransNr;
              if (ReadFirstMain(IVr,1,true)) then begin
                if (IVr.Invalid==0) then begin
                  if (IVr.InvType==kInvoiceTypeCredit) then begin
                    switch (colns) begin
                      case "paidvalue":
                      case "grossprofit":
                          bal = bal + IVr.TotGP;
                      case "salesexclvat":
                        if (IVr.InclVAT!=0) then begin
                          bal = bal + (IVr.Sum4 - IVr.Sum3);
                        end else begin
                          bal = bal + IVr.Sum1;
                        end;
                      otherwise bal = bal + IVr.Sum4;
                    end;
                  end;
                end;
              end;
            end;
          case kIPrsTransTypeReceipt:
            IPr.SerNr = IPrsr.TransNr;
            if (ReadFirstMain(IPr,1,true)) then begin

              if (IPr.RejectedFlag==0) then begin
                rwcnt = MatRowCnt(IPr);
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(IPr,i,IPrw);
                  testf = true;
                  if (IPrw.ovst!=0) then begin testf = false; end;
                  if (IPrw.InvoiceNr!=IPrsr.IVNr) then begin testf = false; end;
                  switch (IPrw.stp) begin
                    case kReceiptRowTypeNormal:
                      if (IPrw.PayDate!=IPrsr.CustDate) then begin
                        testf = false;
                      end;
                    case kReceiptRowTypeSettlementDiscount:
                    case kReceiptRowTypeWriteoff:
                    case kReceiptRowTypeBankFee:                    
                      testf = false;
                    otherwise
                      testf = false;
                  end;                        
                  if (testf) then begin
                    switch (colns) begin
                      case "grossprofit":
                      case "salesexclvat":
                      case "paidvalue":
                        t = -IPrw.InvVal;
                        if ((blank(CUr.CurncyCode)) or (CUr.CurncyCode==bcur.BaseCur1)) then begin          
                          IVr.SerNr = IPrw.InvoiceNr;
                          if (ReadFirstMain(IVr,1,true)) then begin 
                            t = MulRateToBase1(IVr.CurncyCode,t,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                          end else begin
                            t = MulRateToBase1(IVr.CurncyCode,t,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                          end;
                        end;
                        bal = bal + t;
                      otherwise 
                        bal = bal + IPrw.InvVal;
                    end;
                  end;    
                end;
              end;    
            end;    
          case kIPrsTransTypeNLTransaction:
            TRr.Number = IPrsr.TransNr;
            TRr.IntYc = GetIntYc(IPrsr.TransDate);
            if (ReadFirstMain(TRr,2,true)) then begin
              rwcnt = MatRowCnt(TRr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(TRr,i,TRrw);
                if ((TRrw.Typ==1) and (TRrw.SerNr==IPrsr.IVNr)) then begin
                  if (TRrw.CompCode==IPrsr.CustCode) then begin
                    t = TRrw.CurCredVal - TRrw.CurDebVal;
                    t2 = TRrw.CredVal - TRrw.DebVal;
                    if ((TRrw.CurDebVal==0) and (TRrw.CurCredVal==0)) then begin
                      t = t2;
                    end;                        
                    if (TypeOfCurncy(TRrw.Curncy,oldstyle)==2) then begin
                      t = TRrw.CredVal2 - TRrw.DebVal2;
                    end;
                    switch (colns) begin
                      case "grossprofit":
                      case "paidvalue":
                        if (TRrw.CredVal!=0) then begin
                           bal = bal - TRrw.CredVal;
                        end;                        
                      case "salesexclvat":                      
                        if (TRrw.DebVal!=0) then begin
                        /*
                          if (nonblank(TRrw.CurDebVal)) then begin
                             if (nonblank(CUr.CurncyCode)) then begin
                               v = TRrw.CurDebVal;
                             end;
                          end else begin
                             v = TRrw.DebVal;
                             if (typofcur==2) then begin
                               v = TRrw.DebVal2;
                             end;
                          end;
*/                          
                           bal = bal + TRrw.DebVal;
                        end;
                      otherwise bal = bal + t;
                    end;
                  end;
                end;
              end;
            end;                      
          case kIPrsTransTypeCashIn:            
            CLInr.SerNr = IPrsr.TransNr;
            if (ReadFirstMain(CLInr,1,true)) then begin
              if (CLInr.Invalid==0) then begin
                rwcnt = MatRowCnt(CLInr);
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(CLInr,i,CLInrw);
                  if ((CLInrw.Type==1) and (CLInrw.TransNr==IPrsr.IVNr)) then begin
                    if (CLInr.CUCode==IPrsr.CustCode) then begin
                      switch (colns) begin
                        case "grossprofit":
                        case "salesexclvat":
                        case "paidvalue":
                          t = -CLInrw.Sum;
                          if ((blank(CUr.CurncyCode)) or (CUr.CurncyCode==bcur.BaseCur1)) then begin          
                            IVr.SerNr = CLInrw.TransNr;
                            if (ReadFirstMain(IVr,1,true)) then begin 
                              t = -MulRateToBase1(IVr.CurncyCode,CLInrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);    
                            end else begin    
                              t = -MulRateToBase1(CLInr.CurncyCode,CLInrw.Sum,CLInr.FrRate,CLInr.ToRateB1,CLInr.ToRateB2,CLInr.BaseRate1,CLInr.BaseRate2,DefaultCurRoundOff);    
                            end;
                          end;
                          bal = bal + t;
                        otherwise bal = bal + CLInrw.Sum;
                      end;
                    end;
                  end;
                end;
              end;
            end;                      
          case kIPrsTransTypeCashOut:            
            CLOutr.SerNr = IPrsr.TransNr;
            if (ReadFirstMain(CLOutr,1,true)) then begin
              if (CLOutr.Invalid==0) then begin
                rwcnt = MatRowCnt(CLOutr);
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(CLOutr,i,CLOutrw);
                  if ((CLOutrw.Type==1) and (CLOutrw.TransNr==IPrsr.IVNr)) then begin
                    if (CLOutr.CUCode==IPrsr.CustCode) then begin
                      switch (colns) begin
                        case "grossprofit":
                        case "salesexclvat":
                        case "paidvalue":
                          t = -CLOutrw.Sum;
                          if ((blank(CUr.CurncyCode)) or (CUr.CurncyCode==bcur.BaseCur1)) then begin          
                            IVr.SerNr = CLOutrw.TransNr;
                            if (ReadFirstMain(IVr,1,true)) then begin 
                              t = -MulRateToBase1(IVr.CurncyCode,CLOutrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);    
                            end else begin    
                              t = -MulRateToBase1(CLOutr.CurncyCode,CLOutrw.Sum,CLOutr.FrRate,CLOutr.ToRateB1,CLOutr.ToRateB2,CLOutr.BaseRate1,CLOutr.BaseRate2,DefaultCurRoundOff);    
                            end;
                          end;
                          bal = bal + t;
                        otherwise bal = bal - CLOutrw.Sum;
                      end;
                    end;
                  end;
                end;
              end;
            end;                      
          case kIPrsTransTypeCredMan:            
            CredManr.SerNr = IPrsr.TransNr;
            if (ReadFirstMain(CredManr,1,true)) then begin
              if (CredManr.Invalid==0) then begin
                switch (colns) begin
                  case "grossprofit":
                  case "salesexclvat":
                  case "paidvalue":
                    t = -CredManr.InvSum4;
                    if ((blank(CUr.CurncyCode)) or (CUr.CurncyCode==bcur.BaseCur1)) then begin          
                      t = -MulRateToBase1(CredManr.CurncyCode,CredManr.InvSum4,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,DefaultCurRoundOff);    
                    end;
                    bal = bal + t;
                  otherwise bal = bal - CredManr.InvSum4;
                end;
              end;
            end;                      

        end;
      end;
    end;
  end;
  end;
  if (IVp.InvType==kInvoiceTypeCredit) then begin
    switch (colns) begin
      case "grossprofit":
        opensum = -IVp.TotGP;
      case "salesexclvat":
        if (IVp.InclVAT!=0) then begin
          opensum = -(IVp.Sum4 - IVp.Sum3) + bal;
        end else begin
          opensum = -IVp.Sum1 + bal;
        end;
      otherwise 
        opensum = -IVp.Sum4 - bal;
    end;
  end else begin
    switch (colns) begin
      case "grossprofit":
        opensum = IVp.TotGP;
      case "salesexclvat":
        if (IVp.InclVAT!=0) then begin
          opensum = (IVp.Sum4 - IVp.Sum3) - bal;
        end else begin
          opensum = IVp.Sum1 - bal;
        end;
      otherwise 
        opensum = IVp.Sum4 - bal;
    end;
  end;
  switch (colns) begin
    case "grossprofit":
      if (IVp.TotGP!=bal) then begin res = true; end;
    case "salesexclvat":
      if (IVp.InclVAT!=0) then begin
        if ((IVp.Sum4 - IVp.Sum3)!=bal) then begin res = true; end;
      end else begin
        if (IVp.Sum1!=bal) then begin res = true; end;
      end;
    otherwise
      if (IVp.InvType==kInvoiceTypeCredit) then begin
        if (IVp.Sum4!=-bal) then begin res = true; end;
      end else begin
        if (IVp.Sum4!=bal) then begin res = true; end;
      end;
  end;
  if (basecurf) then begin
    opensum = MulRateToBase1(IVp.CurncyCode,opensum,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
  end;
  CheckIfIVOpen = res;
  RETURN;
END;

global
function Boolean IsPrepaymentOpen(Date ondate,LongInt prepaymentnr,var val rval)
BEGIN
  Boolean res;
  record ARPayHistVc ARHistr;
  Boolean found;
  record IPVc IPr;
  row IPVc IPrw;
  Integer i,rwcnt;
  record IVVc IVr;
  row IVVc IVrw;

  rval = blankval;

  ARHistr.CUPNr = prepaymentnr;
  found = true;
  while (LoopKey("CUPNrTransDate",ARHistr,2,found)) begin
    if (ARHistr.CUPNr!=prepaymentnr) then begin found = false; end;
    if (ARHistr.TransDate>ondate) then begin found = false; end;
    if (found) then begin
      switch (ARHistr.FileName) begin
        case "IPVc":
          rval = rval + ARHistr.Val;
        case "IVVc":
//          rval = rval - ARHistr.Val;
        case "CLInVc":
          rval = rval + ARHistr.Val;
        case "CLOutVc":
          rval = rval - ARHistr.Val;
      end;
    end;
  end;
  if (rval!=0) then begin res = true; end;
  IsPrepaymentOpen = res;
  return;
end;  

global
function Boolean CheckIfPrepaymentOpen(string vc,Date ondate,LongInt ipnr,LongInt prepaymentnr,val recval,var val rval)
BEGIN
  Boolean res;
  record ARPayHistVc ARHistr;
  Boolean found;
  record IPVc IPr;
  row IPVc IPrw;
  Integer i,rwcnt;
  record IVVc IVr;
  row IVVc IVrw;

  rval = blankval;
  ARHistr.CUPNr = prepaymentnr;
  ARHistr.FileName = vc;
  found = true;
  while (LoopMain(ARHistr,2,found)) begin
    if ((ARHistr.CUPNr<>prepaymentnr) or (ARHistr.FileName<>vc)) then begin found = false; end;
    if (found) then begin
      if (ARHistr.SerNr!=ipnr) then begin
        IPr.SerNr = ARHistr.SerNr;
        if (ReadFirstMain(IPr,1,true)) then begin
          rwcnt = MatRowCnt(IPr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IPr,i,IPrw);
            if (IPrw.CUPNr==prepaymentnr) then begin
              rval = rval + IPrw.RecVal;
            end;
          end;
        end;
      end;
    end;
  end;
  ResetLoop(ARHistr);
  ARHistr.CUPNr = prepaymentnr;
  ARHistr.FileName = "IVVc";
  found = true;
  while (LoopMain(ARHistr,2,found)) begin
    if ((ARHistr.CUPNr<>prepaymentnr) or (ARHistr.FileName<>"IVVc")) then begin found = false; end;
    if (found) then begin
      if (ARHistr.SerNr!=ipnr) then begin
        IVr.SerNr = ARHistr.SerNr;
        if (ReadFirstMain(IVr,1,true)) then begin
          rwcnt = MatRowCnt(IVr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVr,i,IVrw);
            if (IVrw.stp==6) then begin
              if (IVrw.CUPNr==prepaymentnr) then begin
                rval = rval - IVrw.Sum;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  if (rval!=recval) then begin res = true; end;
  rval = rval - recval;
  CheckIfPrepaymentOpen = res;
  RETURN;
END;

global
procedure OneARSFormOpenOnDate(record RcVc RepSpec,record CUVc CUp,Integer reportmode,var val balp)
BEGIN
  record IPrsVc IPrsr;
  record IVVc IVr;
  Boolean TrHs;
  val ARSSum;
  val ARSIntSum;
  val ARSSumNotLate;
  val ARSSumLate;
  Integer ARSLateCount;
  Integer ARSNotLateCount;
  val ARSARSum;
  val ARSsact,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151;
  val ARSSumod,ARSsactod,ARSs0od,ARSs1od,ARSs16od,ARSs31od,ARSs61od,ARSs91od,ARSs121od,ARSs151od;
  val ARSStartBal;
  val ARSOnAccBal;
  val intv;
  LongInt latedays,maxintdays;
  Boolean testf,prflag;// Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 4 December 2019 15:45:22
  val rval,rval2,t;
  val fr,to1,to2,br1,br2;
  Boolean onaccf;
  record SMVc CurTotalsr;
  val sumbooked,sumnow,sumcurncy,sumdiff;
  Array Integer aRwtype;
  Array string 255 aInvoiceNr;
  Array string 255 aRecNr;
  Array LongInt alatedays;
  Array LongInt aRemndr;
  Array Date aInvDate;
  Array Date aDueDate;
  Array val aIntVal;
  Array val aRVal;
  Array val aRValCur;
  Array val aSum4;
  Array string 20 aVEInvNo;
  Array string 5 aCurncyCode;
  Array string 100 aOfficialSerNo;
  Array string 50 aCustOrdNo;
  Integer acnt;
  string 10 basecur1,curncy;
  val opensum,opensumb1;
  Date bd;
  record IPVc IPr;
  row IPVc IPrw;
  Integer i,rwcnt;
  Array string 10 debaccs;
  Array val debbal;
  Integer debcnt;
  
  GetBaseCurncy(1,basecur1);
  if (blank(CUp.CurncyCode)) then begin
    CUp.CurncyCode = basecur1;
  end;
  if (nonblankdate(RepSpec.d1)) then begin
    maxintdays = DateDiff(CurrentDate,RepSpec.d1);
  end else begin
    maxintdays = -1;
  end;
  GetFullCurncyRate(CUp.CurncyCode,RepSpec.d1,fr,to1,to2,br1,br2);
  GetOnAccBalance(RepSpec,CUp.Code,CUp.CurncyCode,true,RepSpec.flags[4],rval,rval2,ARSOnAccBal,sumbooked,sumnow,sumcurncy,sumdiff,CurTotalsr,debaccs,debbal,debcnt);//ObjStr
  if (RepSpec.flags[4]==0) then begin ARSOnAccBal = rval; end;

  IPrsr.CustCode = CUp.Code;
  TrHs = true;
//  IPrsr.TransDate = RepSpec.d1; either this or...
//  while (LoopBackKey("CustTransKey",IPrsr,2,TrHs)) begin
//this
  IPrsr.TransDate = AddYear(IPrsr.TransDate,1980);
  IPrsr.TransDate = AddMonth(IPrsr.TransDate,1);
  IPrsr.TransDate = AddDay(IPrsr.TransDate,1);
  while (LoopKey("CustTransKey",IPrsr,2,TrHs)) begin
    if (TrHs) then begin
      if (IPrsr.CustCode!=CUp.Code) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      if (IPrsr.TransDate>RepSpec.d1) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      switch (IPrsr.TransType) begin
        case kIPrsTransTypeInvoice:
          IVr.SerNr = IPrsr.TransNr;
          testf = true;
          if (ReadFirstMain(IVr,1,true)==false) then begin goto L20OneARSFormOpenOnDate; end;        
			 if (nonblank(RepSpec.f6)) and (IVr.PRCode<>RepSpec.f6) then begin goto L20OneARSFormOpenOnDate; end;// SAV 2011_08_18// Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 4 December 2019 15:45:33
			 prflag=true;// Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 4 December 2019 15:45:31
          if (IVr.Invalid!=0) then begin goto L20OneARSFormOpenOnDate; end;                              
          if (RepSpec.flags[12]!=0) then begin
            if (IVr.NoRemndrFlag!=0) then begin
              goto L20OneARSFormOpenOnDate;
            end;
            if (CUp.RemndrFlag==0) then begin
              goto L20OneARSFormOpenOnDate;
            end;
          end;
          if ((IVr.DisputedFlag!=0) and (RepSpec.flags[11]!=0)) then begin
            goto L20OneARSFormOpenOnDate;
          end;
          if ((IVr.NoColectionFlag!=0) and (RepSpec.flags[13]!=0)) then begin
            goto L20OneARSFormOpenOnDate;
          end;
          if (IVr.InvType==2) then begin
            goto L20OneARSFormOpenOnDate;
          end;
          if (reportmode==0) then begin
            if ((IVr.InvType==3) and (RepSpec.flags[9]==0)) then begin
              goto L20OneARSFormOpenOnDate;
            end;
            if ((IVr.InvType!=6) and (RepSpec.flags[10]!=0)) then begin
              goto L20OneARSFormOpenOnDate;
            end;
          end;
          if (reportmode==1) then begin
            if (nonblank(RepSpec.ObjStr)) then begin
              if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin
                goto L20OneARSFormOpenOnDate;
              end;
            end;
            if ((IVr.InvType!=6) and (RepSpec.flags[10]!=0)) then begin
              goto L20OneARSFormOpenOnDate;
            end;
          end; 
          latedays = DateDiff(IVr.PayDate,RepSpec.d1);
          if (reportmode==0) then begin
            if (RepSpec.Comparison!=0) then begin
              if ((-latedays)<RepSpec.Comparison) then begin goto L20OneARSFormOpenOnDate; end;
            end;
          end;
          if (IVr.InvType==kInvoiceTypeCredit) then begin
            if (IVr.CredInv!=-1) then begin goto L20OneARSFormOpenOnDate; end;
          end;          
          if (CheckIfIVOpen(RepSpec.d1,IVr,"",opensum,true,false)==false) then begin goto L20OneARSFormOpenOnDate; end;
          opensumb1 = opensum;
          if (RepSpec.flags[4]==0) then begin
            opensumb1 = MulRateToBase1(IVr.CurncyCode,opensum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          end;          
          if (testf) then begin
          if ((RepSpec.flags[0]==0) or (latedays<0)) then begin
// I am not sure about this fix at all...
            if ((IVr.RetnValue>0 and IVr.Sum4>0) or (IVr.RetnValue<0 and IVr.Sum4<0)) then begin
              rval = rval + IVr.RetnValue;
            end;
            if (IVr.CurncyCode==CUp.CurncyCode) then begin
              rval = opensum;
            end else begin
              if (blank(CUp.CurncyCode)) then begin
                rval = opensum;
              end else begin
                rval = DivRateToBase1(CUp.CurncyCode,opensum,fr,to1,to2,br1,br2,DefaultCurRoundOff);
              end;
            end;
            ARSARSum = ARSARSum + rval;
            switch (RepSpec.flags[0]) begin
              case 0:
                if (RepSpec.flags[4]==0) then begin
                  ARSSum = ARSSum + MulRateToBase1(IVr.CurncyCode,rval,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);;
                end else begin                
                  ARSSum = ARSSum + rval;
                end;
                if (latedays>-1) then begin//-2???
                  if (RepSpec.flags[4]==0) then begin
                    ARSSumNotLate = ARSSumNotLate + MulRateToBase1(IVr.CurncyCode,rval,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);;
                  end else begin
                    ARSSumNotLate = ARSSumNotLate + rval;
                  end;
                  ARSNotLateCount = ARSNotLateCount + 1;
                  AddARSRow2(aRwtype,aInvoiceNr,aRecNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRValCur,aSum4,aVEInvNo,aCurncyCode,aOfficialSerNo,acnt,
                            RepSpec,CUp,maxintdays,opensum,opensumb1,IVr,intv);
                  ARSIntSum = ARSIntSum + intv;
                end else begin
                  if (RepSpec.flags[4]==0) then begin
                    ARSSumLate = ARSSumLate + MulRateToBase1(IVr.CurncyCode,rval,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);;
                  end else begin
                    ARSSumLate = ARSSumLate + rval;
                  end;
                  ARSLateCount = ARSLateCount + 1;
                  if ((reportmode==0) and (RepSpec.flags[2]==1)) then begin
                  end;
                  AddARSRow2(aRwtype,aInvoiceNr,aRecNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRValCur,aSum4,aVEInvNo,aCurncyCode,aOfficialSerNo,acnt,
                            RepSpec,CUp,maxintdays,opensum,opensumb1,IVr,intv);
                  ARSIntSum = ARSIntSum + intv;
                end;
              case 2:
                if (latedays<=-1) then begin//-2???
                  if (RepSpec.flags[4]==0) then begin
                    ARSSum = ARSSum + MulRateToBase1(IVr.CurncyCode,rval,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);;
                  end else begin                
                    ARSSum = ARSSum + rval;
                  end;
                  ARSSumLate = ARSSumLate + rval;
                  ARSLateCount = ARSLateCount + 1;
                  AddARSRow2(aRwtype,aInvoiceNr,aRecNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRValCur,aSum4,aVEInvNo,aCurncyCode,aOfficialSerNo,acnt,
                            RepSpec,CUp,maxintdays,opensum,opensumb1,IVr,intv);
                  ARSIntSum = ARSIntSum + intv;
                end;
            end;
          end;
        end;
        case kIPrsTransTypeReceipt:
          testf = false;
          if (IPrsr.IVNr==-1) then begin
            IPr.SerNr = IPrsr.TransNr;
            if (ReadFirstMain(IPr,1,true)) then begin
              rwcnt = MatRowCnt(IPr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(IPr,i,IPrw);
                if ((blankdate(IPrw.PayDate)) or (IPrw.PayDate==IPrsr.CustDate)) then begin
                  if (IPrw.InvoiceNr==-1) and (IPrw.CUPNr>0) then begin
                    testf = CheckIfPrepaymentOpen("IPVc",RepSpec.d1,IPr.SerNr,IPrw.CUPNr,IPrw.RecVal,opensum);
                    i = rwcnt;
                    curncy = IPrw.RecCurncy;
                  end;
                end;
              end;
            end;
          end;
          if (testf) then begin
//            AddARSRowIP(aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRValCur,aSum4,aVEInvNo,aCurncyCode,acnt,
//                      RepSpec,CUp,maxintdays,opensum,IPr,IPrw);
          end;
      end;
L20OneARSFormOpenOnDate:;      
    end;
  end;
  CustAged(CUp,CurrentDate,bd,bd,t,ARSsact,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151);
  CustAged(CUp,RepSpec.d1,bd,RepSpec.d1,ARSSumod,ARSsactod,ARSs0od,ARSs1od,ARSs16od,ARSs31od,ARSs61od,ARSs91od,ARSs121od,ARSs151od);
  testf = true;
  if (RepSpec.flags[1]==1) then begin
    if (ARSARSum==0) and (ARSOnAccBal==0) then begin
      testf = false;
    end;
  end;
  if (RepSpec.flags[16]!=0) then begin
    if (acnt==0) and (ARSOnAccBal==0) then begin testf = false; end;
  end;
  if prflag==false then begin testf = false; end;// Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 4 December 2019 15:45:36
  if (testf) then begin  
    switch (reportmode) begin
      case 0: 
        if (CUp.RemndrFlag!=0) then begin 
          PrintARSForm(RepSpec,CUp,ARSSum,ARSOnAccBal,ARSIntSum,ARSSumLate,ARSARSum,ARSStartBal,ARSSumNotLate,ARSLateCount,ARSNotLateCount,
                       ARSsact,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151,
                       ARSSumod,ARSsactod,ARSs0od,ARSs1od,ARSs16od,ARSs31od,ARSs61od,ARSs91od,ARSs121od,ARSs151od,
                       aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRValCur,aSum4,aVEInvNo,aCurncyCode,aOfficialSerNo,aCustOrdNo,acnt); 
          end;
        case 1: 
          balp = balp + ARSOnAccBal;
          ARSrList(RepSpec,CUp,ARSSum,ARSOnAccBal,ARSIntSum,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151,aRwtype,aInvoiceNr,aRecNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRValCur,aSum4,aVEInvNo,aCurncyCode,aOfficialSerNo,acnt); 
      end;
  end;
  balp = balp + ARSSum;
  RETURN;
END;
